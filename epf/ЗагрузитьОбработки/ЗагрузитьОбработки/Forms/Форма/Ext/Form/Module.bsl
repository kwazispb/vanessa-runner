&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МожноЗавершатьРаботу = Ложь;
	ПараметрЗапускаФормы = ПараметрЗапуска;
	
	Если Не ПустаяСтрока(ПараметрЗапускаФормы) Тогда
		ЗапуститьОбработчикиОжидания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбработчикиОжидания()
	
	МассивПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапускаФормы, ";");
	
	НеобходимоЗавершатьРаботу = (Найти(ПараметрЗапуска, "ЗавершитьРаботуСистемы;") > 0 ИЛИ НеобходимоЗавершатьРаботу);
	Если МассивПараметров.Количество() < 2 И НеобходимоЗавершатьРаботу Тогда
		МожноЗавершатьРаботу = Истина;
		Возврат;
	КонецЕсли;
	
	Путь = МассивПараметров[0];
	ПутьКЛогам = МассивПараметров[1];
	
	ПодключитьОбработчикОжидания("ПодключитьЗагрузкуОбработки", 2, Истина);
	ПодключитьОбработчикОжидания("ПроверитьВозможностьЗакрытия", 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьЗакрытия() Экспорт
	Если МожноЗавершатьРаботу И НеобходимоЗавершатьРаботу Тогда
		Сообщить("Завершаем работу");
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультатПодключения(ИмяФайла, Результат)
	
	Сообщить(Результат);
	
	Попытка
		ТекстовыйДокумент = Новый ЗаписьТекста(ИмяФайла, , , Истина);
		ТекстовыйДокумент.ЗаписатьСтроку(Результат);
		ТекстовыйДокумент.Закрыть();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьЗагрузкуОбработки() Экспорт
	
	КаталогОбработок = Новый Файл(Путь);
	Контекст = Новый Структура;
	Контекст.Вставить("ДействиеОтсутствует", "ЗавершитьРаботу");
	Контекст.Вставить("ДействиеСуществует", "РекурсивнаяЗагрузка");
	Контекст.Вставить("Файл", КаталогОбработок.ПолноеИмя);
	
	КаталогОбработок.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайла", ЭтотОбъект, Контекст));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		СписокФайловДляЗагрузки.Очистить();
		СостояниеПоискаФайлов.Очистить();
		СостояниеПоискаФайлов.Добавить("*.epf");
		СостояниеПоискаФайлов.Добавить("*.erf");
		КонечныйАвтомат(ДополнительныеПараметры["ДействиеСуществует"], ДополнительныеПараметры);
	Иначе
		КонечныйАвтомат(ДополнительныеПараметры["ДействиеОтсутствует"], ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонечныйАвтомат(Действие, ДополнительныеПараметры)
	Если Действие = "ЗавершитьРаботу" Тогда
		МожноЗавершатьРаботу = Истина;
		Возврат;
	ИначеЕсли Действие = "РекурсивнаяЗагрузка" Тогда
		РекурсивнаяЗагрузкаВнешнихОбработок(ДополнительныеПараметры);
	ИначеЕсли Действие = "ЗаписатьСообщение" Тогда
		ЗаписатьРезультатПодключения(ПутьКЛогам, ДополнительныеПараметры);
	ИначеЕсли Действие = "ЗаписатьОшибкуВЛог" Тогда
		ЗаписатьРезультатПодключения(ПутьКЛогам, ДополнительныеПараметры);
	ИначеЕсли Действие = "ЗаписатьОшибкуВЛогИЗавершить" Тогда
		ЗаписатьРезультатПодключения(ПутьКЛогам, ДополнительныеПараметры);
		КонечныйАвтомат("ЗавершитьРаботу", "");
	ИначеЕсли Действие = "ЗагрузитьСписокФайлов" Тогда
		ЗагрузитьСписокФайлов(ДополнительныеПараметры);
	ИначеЕсли Действие = "ПроверитьКоличествоФайловКЗагрузкеИЗавершить" Тогда
		Если ДополнительныеПараметры = 0 Тогда
			КонечныйАвтомат("ЗавершитьРаботу", "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПоискаФайлов(ОписаниеОшибки, Параметр2, ДополнительныеПараметры) Экспорт
	
	Элемент = СостояниеПоискаФайлов.НайтиПоЗначению(ДополнительныеПараметры.МаскаПоиска);
	Если Элемент <> Неопределено Тогда
		СостояниеПоискаФайлов.Удалить(Элемент);
	КонецЕсли;
	
	КоличествоЗадачКВыполнению = СостояниеПоискаФайлов.Количество() + СписокФайловДляЗагрузки.Количество();
	КонечныйАвтомат("ПроверитьКоличествоФайловКЗагрузкеИЗавершить", КоличествоЗадачКВыполнению);
	КонечныйАвтомат("ЗаписатьОшибкуВЛогИЗавершить", ОписаниеОшибки.Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПомещенияВнешнихОбработок(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		КонечныйАвтомат("ЗаписатьОшибкуВЛог", "Не удалось поместить в хранилище файлы");
	Иначе
		Для каждого ЭлементМассива Из ПомещенныеФайлы Цикл
			
			ИмяФайла = ЭлементМассива.ПолноеИмя;
			
			ПараметрыРегистрации = Новый Структура;
			ПараметрыРегистрации.Вставить("ИмяФайла", "");
			ПараметрыРегистрации.Вставить("ПолноеИмя", ИмяФайла);
			ПараметрыРегистрации.Вставить("ЭтоОтчет", Неопределено);
			ПараметрыРегистрации.Вставить("ОтключатьКонфликтующие", Ложь);
			ПараметрыРегистрации.Вставить("ОтключатьПубликацию", Ложь);
			ПараметрыРегистрации.Вставить("Конфликтующие", Новый СписокЗначений);
			ПараметрыРегистрации.Вставить("АдресДанныхОбработки", "");
			
			ФайлОбработки = Новый Файл(ИмяФайла);
			ПараметрыРегистрации.ИмяФайла = ФайлОбработки.Имя;
			РасширениеФайла = ВРег(ФайлОбработки.Расширение);
			Если РасширениеФайла = ".ERF" Тогда
				ПараметрыРегистрации.ЭтоОтчет = Истина;
			ИначеЕсли РасширениеФайла = ".EPF" Тогда
				ПараметрыРегистрации.ЭтоОтчет = Ложь;
			КонецЕсли;
			
			ПараметрыРегистрации.АдресДанныхОбработки = ЭлементМассива.Хранение;
			РезультатПодключения = ЗарегистрироватьОбработкуНаСервере(ПараметрыРегистрации);
			КонечныйАвтомат("ЗаписатьСообщение", "Подключение " + ИмяФайла + ": " + РезультатПодключения);
			Элемент = СписокФайловДляЗагрузки.НайтиПоЗначению(ПараметрыРегистрации.ПолноеИмя);
			Если Не Элемент = Неопределено Тогда
				СписокФайловДляЗагрузки.Удалить(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СостояниеПоискаФайлов.Количество() Тогда
		
		КонечныйАвтомат("РекурсивнаяЗагрузка", ДополнительныеПараметры);
		
	КонецЕсли;
	
	КонечныйАвтомат("ПроверитьКоличествоФайловКЗагрузкеИЗавершить", СостояниеПоискаФайлов.Количество() + СписокФайловДляЗагрузки.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПомещенияВнешнихОбработок(ОписаниеОшибки, ДополнительныеПараметры) Экспорт
	
	Элемент = СостояниеПоискаФайлов.НайтиПоЗначению(ДополнительныеПараметры.МаскаПоиска);
	Если Элемент <> Неопределено Тогда
		СостояниеПоискаФайлов.Удалить(Элемент);
	КонецЕсли;
	
	КоличествоЗадачКВыполнению = СостояниеПоискаФайлов.Количество() + СписокФайловДляЗагрузки.Количество();
	КонечныйАвтомат("ПроверитьКоличествоФайловКЗагрузкеИЗавершить", КоличествоЗадачКВыполнению);
	КонечныйАвтомат("ЗаписатьОшибкуВЛогИЗавершить", ОписаниеОшибки.Описание);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыРегламентныеЗадания(РезультатРегистрации, КомандыСохраненные = Неопределено)
	
	РезультатРегистрации.ОбъектСправочника.Команды.Сортировать("Представление");
	
	ВидДополнительнаяОбработка = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ВидДополнительныйОтчет = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	
	Для Каждого ЭлементКоманда Из РезультатРегистрации.ОбъектСправочника.Команды Цикл
		
		Если РезультатРегистрации.ОбъектСправочника.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
			И (ЭлементКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода
				ИЛИ ЭлементКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме) Тогда
			
			РегламентноеЗаданиеGUID = ЭлементКоманда.РегламентноеЗаданиеGUID;
			Если КомандыСохраненные <> Неопределено Тогда
				НайденнаяСтрока = КомандыСохраненные.Найти(ЭлементКоманда.Идентификатор, "Идентификатор");
				Если НайденнаяСтрока <> Неопределено Тогда
					РегламентноеЗаданиеGUID = НайденнаяСтрока.РегламентноеЗаданиеGUID;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РегламентноеЗаданиеGUID) Тогда
				ЭлементКоманда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьОбработкуНаСервере(ПараметрыРегистрации)
	Перем Результат;
	Результат = "Успешно"; // По умолчанию успех.
	
	// ПараметрыРегистрации.Вставить("КомандыСохраненные", Неопределено);
	// Вызов сервера
	РезультатРегистрации = ЗарегистрироватьОбработку(ПараметрыРегистрации);
	
	Если ПустаяСтрока(РезультатРегистрации.КраткоеПредставлениеОшибки) Тогда
		
		// Обработка результата работы сервера
		Если РезультатРегистрации.Успех = Истина Тогда
			
			ЗаполнитьКомандыРегламентныеЗадания(РезультатРегистрации, РезультатРегистрации.КомандыСохраненные);
			
			РезультатРегистрации.ОбъектСправочника.ХранилищеОбработки =
				Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПараметрыРегистрации.АдресДанныхОбработки), Новый СжатиеДанных(9));
			РезультатРегистрации.ОбъектСправочника.Записать();
			Возврат Результат;
			
		КонецЕсли;
	Иначе
		Результат = РезультатРегистрации.КраткоеПредставлениеОшибки;
		
		// Разбор причины отказа загрузки обработки и отображение информации пользователю
		Если РезультатРегистрации.ИмяОбъектаЗанято = Ложь Тогда
			
			// Причина отказа в КраткоеПредставлениеОшибки
			Результат = РезультатРегистрации.КраткоеПредставлениеОшибки;
			
		ИначеЕсли РезультатРегистрации.Конфликтующие.Конфликтующие.Количество() > 0 Тогда
			
			// Представление занявших объектов
			КоличествоКонфликтующих = РезультатРегистрации.Конфликтующие.Количество();
			ПредставлениеЗанявших = "";
			Для Каждого ЭлементСписка Из РезультатРегистрации.Конфликтующие Цикл
				ПредставлениеЗанявших = ПредставлениеЗанявших
					+ ?(ПредставлениеЗанявших = "", "", ", ")
					+ СокрЛП(ЭлементСписка.Представление);
				Если СтрДлина(ПредставлениеЗанявших) > 80 Тогда
					ПредставлениеЗанявших = Лев(ПредставлениеЗанявших, 70)
						+ "... ("
						+ Формат(КоличествоКонфликтующих, "ЧН=0; ЧГ=")
						+ " "
						+ НСтр("ru = 'шт'")
						+ ")";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Имя ""%1"" уже занято другими дополнительными отчетами (обработками):
						|%2.'"),
					РезультатРегистрации.ИмяОбъекта,
					ПредставлениеЗанявших
				);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСписокФайлов(НайденныеФайлы)
	
	// Найденные файлы загружаем в список значений.
	МассивПомещаемыхФайлов = Новый Массив;
	Для каждого Элемент Из НайденныеФайлы Цикл
		НайденныйЭлемент = СписокФайловДляЗагрузки.НайтиПоЗначению(Элемент.ПолноеИмя);
		Если НайденныйЭлемент = Неопределено Тогда
			СписокФайловДляЗагрузки.Добавить(Элемент.ПолноеИмя);
			ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(Элемент.ПолноеИмя);
			МассивПомещаемыхФайлов.Добавить(ОписаниеПередаваемогоФайла);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПомещенияОбработок = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеПомещенияВнешнихОбработок", ЭтотОбъект, ПараметрыПомещенияОбработок, "ОшибкаПомещенияВнешнихОбработок", ЭтотОбъект);
	НачатьПомещениеФайлов(ОписаниеОповещения, МассивПомещаемыхФайлов, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьОбработку(ПараметрыРегистрации)
	
	СсылкаСправочника = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяФайла", ПараметрыРегистрации.ИмяФайла);
	Если СсылкаСправочника.Пустая() Тогда
		ОбъектСправочника = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		ОбъектСправочника.Заполнить(Неопределено);
		ОбъектСправочника.ИспользоватьДляФормыОбъекта = Истина;
		ОбъектСправочника.ИспользоватьДляФормыСписка = Истина;
	Иначе
		ОбъектСправочника = СсылкаСправочника.ПолучитьОбъект();
	КонецЕсли;
	
	КомандыСохраненные = ОбъектСправочника.Команды.Выгрузить();
	
	Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(ОбъектСправочника, ПараметрыРегистрации);
	АдресРазрешений = ПоместитьВоВременноеХранилище(ОбъектСправочника.Разрешения.Выгрузить());
	
	Результат.Вставить("ОбъектСправочника", ОбъектСправочника);
	Результат.Вставить("КомандыСохраненные", КомандыСохраненные);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФайлОтчетаИлиОбработки(Знач Файл)
	РасширениеФайла = ВРег(Файл.Расширение);
	Возврат РасширениеФайла = ".EPF" ИЛИ РасширениеФайла = ".ERF";
	
КонецФункции

&НаКлиенте
Процедура РезультатПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		
		Если СостояниеПоискаФайлов.Количество() Тогда
			
			КонечныйАвтомат("РекурсивнаяЗагрузка", ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		КонечныйАвтомат(ДополнительныеПараметры.Действие, НайденныеФайлы);
	КонецЕсли;
	
	Элемент = СостояниеПоискаФайлов.НайтиПоЗначению(ДополнительныеПараметры.МаскаПоиска);
	Если Элемент <> Неопределено Тогда
		СостояниеПоискаФайлов.Удалить(Элемент);
	КонецЕсли;
	
	КоличествоЗадачКВыполнению = СостояниеПоискаФайлов.Количество() + СписокФайловДляЗагрузки.Количество();
	КонечныйАвтомат("ПроверитьКоличествоФайловКЗагрузкеИЗавершить", КоличествоЗадачКВыполнению);
	
КонецПроцедуры // РезультатПоискаФайлов

&НаКлиенте
Процедура РекурсивнаяЗагрузкаВнешнихОбработок(ДополнительныеПараметры)
	Перем СписокМасокФайлов;
	Перем Элемент;
	Перем Контекст;
	
	МаскаПоиска = СостояниеПоискаФайлов[0].Значение;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Действие", "ЗагрузитьСписокФайлов");
	Контекст.Вставить("МаскаПоиска", МаскаПоиска);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатПоискаФайлов", ЭтотОбъект, Контекст, "ОшибкаПоискаФайлов", ЭтотОбъект);
	НачатьПоискФайлов(ОписаниеОповещения, Путь, МаскаПоиска, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Запустить(Команда)
	ЗапуститьОбработчикиОжидания();
КонецПроцедуры